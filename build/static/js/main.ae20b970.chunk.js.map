{"version":3,"sources":["constants/localStorageConstants.js","utilities/saveToLocalStorage.ts","models/todoModel.tsx","components/inputComponent/index.tsx","components/header/index.tsx","components/listingComponent/index.tsx","App.tsx","hooks/useAddTodo.ts","serviceWorker.ts","index.tsx"],"names":["saveToLocalStorage","saveObj","key","localStorage","setItem","getFromLocalStorage","getItem","ListingTodoModel","listingTitle","id","Math","random","isStriked","this","InputComponent","props","useState","text","setText","className","data-testid","type","value","placeholder","onChange","e","target","onClick","trim","buttonClickCallback","Header","datatestid","heading","ListingComponent","modelList","onClickStriker","map","element","index","App","list","setList","LOCAL_STORAGE_CONST","useEffect","listJson","parsed","JSON","parse","setStrikeUnStrike","model","jsonListFromStorage","filter","stringify","push","useAddTodo","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.ae20b970.chunk.js","sourcesContent":["export default {\nTODO_LIST:'PROJECT-NAME_todoList'    \n}","function saveToLocalStorage(saveObj:any,key:string){\nlocalStorage.setItem(key, saveObj);\n}\n\nfunction getFromLocalStorage(key:string){\n    return localStorage.getItem(key);\n}\n\nexport {saveToLocalStorage,getFromLocalStorage}","export default class ListingTodoModel {\n    id:number = Math.random()\n    listingTitle?: string = \"Dummy\"\n    isStriked:boolean = false\n\n    constructor(listingTitle:string){\n        this.listingTitle = listingTitle\n    }\n\n}","import React, { useState } from 'react';\nimport './index.css';\n\ninterface InputComponentProps {\n    buttonClickCallback: (text:string) => void\n}\n\nfunction InputComponent(props:InputComponentProps) {\n    const [text,setText] = useState('')\n    const onChangeText = (e:any) => {\n        setText(e.target.value)\n    }\n\n    const onClickButtonAction = () => {\n        if (text.trim() !== ''){\n            props.buttonClickCallback(text)\n            setText('')\n        }\n    }\n\n  return (\n    <div className=\"rootContainer\">\n    <input  data-testid=\"todo-input-field\" className=\"todo-textField\" type=\"text\" value={text} placeholder=\"Enter your todo here\" onChange={onChangeText}/>\n    <button data-testid=\"add-Button\" className=\"todo-Button\" onClick={onClickButtonAction}>Add</button>\n    </div>\n  );\n}\n\nexport default InputComponent;\n","import React from 'react';\nimport './index.css';\nimport { strict } from 'assert';\ntype HeaderProps = {\n  heading?: string,\n  datatestid?:string\n}\n\nfunction Header({datatestid,heading}:HeaderProps) {\n  return (\n    <div className=\"headerContainer\">\n      <p data-testid={datatestid} className=\"headerTitleStyle\">{heading || 'Heading Text'}</p>\n    </div>\n  );\n}\n\nexport default Header;\n","import React from 'react';\nimport ListingTodoModel from '../../models/todoModel'\nimport './index.css';\ntype ListingProps = {\n  modelList: Array<ListingTodoModel>,\n  onClickStriker?: (model: ListingTodoModel) => void\n}\n\nfunction ListingComponent({ modelList, onClickStriker }: ListingProps) {\n  return (\n    <div className=\"listContainer\">\n      <ul>\n        {modelList.map((element,index) => <li key={index} className={element.isStriked ? 'strikeText textStyle' : 'textStyle'} onClick={() => {\n          if (onClickStriker) {\n            onClickStriker(element)\n          }\n        }}>{element.listingTitle}</li>)}\n      </ul>\n    </div>\n  )\n}\n\nexport default ListingComponent;\n","import React from 'react';\nimport useAddTodo from './hooks/useAddTodo'\nimport InputComponent from './components/inputComponent'\nimport Header from './components/header'\nimport ListingComponent from './components/listingComponent'\nimport './App.css';\n\nfunction App() {\n  const {setStrikeUnStrike,setText,list} = useAddTodo()\n  return (\n      <div className=\"App-header\">\n      <Header datatestid=\"top-header\" heading='Todo App'/>\n      <InputComponent buttonClickCallback={setText}/>\n      <Header datatestid=\"list-header\" heading=\"Todo List\"/>\n      <ListingComponent \n        modelList={list} \n        onClickStriker={setStrikeUnStrike}\n        />\n      </div>\n  );\n}\n\nexport default App;\n","import { useEffect, useState } from 'react'\nimport LOCAL_STORAGE_CONST from '../constants/localStorageConstants'\nimport { saveToLocalStorage, getFromLocalStorage } from '../utilities/saveToLocalStorage'\nimport ListingTodoModel from '../models/todoModel'\n\nexport default function useAddTodo() {\n\n    const [list, setList] = useState<ListingTodoModel[]>([])\n    const key = LOCAL_STORAGE_CONST.TODO_LIST\n\n    useEffect(() => {\n        const listJson = getFromLocalStorage(key)\n        if (listJson) {\n            let parsed = JSON.parse(listJson)\n            let jsonListFromStorage: Array<ListingTodoModel> = parsed\n            setList(jsonListFromStorage)\n        }\n    },[])\n\n    const setText = (text: string) => {\n        const listJson = getFromLocalStorage(key)\n        if (!listJson) {\n            let model = new ListingTodoModel(text)\n            let modelList = [model]\n            let list = JSON.stringify(modelList)\n            saveToLocalStorage(list, key)\n            setList(modelList)\n        } else {\n            let jsonListFromStorage: Array<ListingTodoModel> = JSON.parse(listJson)\n            let model = new ListingTodoModel(text)\n            jsonListFromStorage.push(model)\n            let stringifiedList = JSON.stringify(jsonListFromStorage)\n            saveToLocalStorage(stringifiedList, key)\n            setList(jsonListFromStorage)\n        }\n    }\n\n    const setStrikeUnStrike = (model: ListingTodoModel) => {\n        const listJson = getFromLocalStorage(key)\n        if (listJson) {\n            let jsonListFromStorage: Array<ListingTodoModel> = JSON.parse(listJson)\n            let filteredElement = jsonListFromStorage.filter((e) => {\n                return e.id === model.id\n            })\n            let element = filteredElement[0]\n            element.isStriked = !element.isStriked\n            const convertToJson = JSON.stringify(jsonListFromStorage)\n            saveToLocalStorage(convertToJson, key)\n            setList(jsonListFromStorage)\n        }\n    }\n\n\n    return { setStrikeUnStrike, setText, list }\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}