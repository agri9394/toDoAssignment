{"ast":null,"code":"import { useEffect, useState } from 'react';\nimport LOCAL_STORAGE_CONST from '../constants/localStorageConstants';\nimport { saveToLocalStorage, getFromLocalStorage } from '../utilities/saveToLocalStorage';\nimport ListingTodoModel from '../models/todoModel';\nexport default function useAddTodo() {\n  const [list, setList] = useState(new Array());\n  useEffect(() => {\n    const key = LOCAL_STORAGE_CONST.TODO_LIST;\n    const listJson = getFromLocalStorage(key);\n\n    if (listJson) {\n      let parsed = JSON.parse(listJson);\n      let jsonListFromStorage = parsed;\n      setList(jsonListFromStorage);\n    }\n  }, []);\n\n  const setText = text => {\n    debugger;\n    const key = LOCAL_STORAGE_CONST.TODO_LIST;\n    const listJson = getFromLocalStorage(key);\n\n    if (!listJson) {\n      let model = new ListingTodoModel(text);\n      let modelList = [model];\n      let list = JSON.stringify(modelList);\n      saveToLocalStorage(list, key);\n      setList(modelList);\n    } else {\n      let jsonListFromStorage = JSON.parse(listJson);\n      let model = new ListingTodoModel(text);\n      jsonListFromStorage.push(model);\n      let stringifiedList = JSON.stringify(jsonListFromStorage);\n      saveToLocalStorage(stringifiedList, key);\n      setList(jsonListFromStorage);\n    }\n  };\n\n  const setStrikeUnStrike = model => {\n    const key = LOCAL_STORAGE_CONST.TODO_LIST;\n    const listJson = getFromLocalStorage(key);\n\n    if (listJson) {\n      let jsonListFromStorage = JSON.parse(listJson);\n      let filteredElement = jsonListFromStorage.filter(e => {\n        return e.id === model.id;\n      });\n      let element = filteredElement[0];\n      element.isStriked = !element.isStriked;\n      const convertToJson = JSON.stringify(jsonListFromStorage);\n      saveToLocalStorage(convertToJson, key);\n      setList(jsonListFromStorage);\n    }\n  };\n\n  return {\n    setStrikeUnStrike,\n    setText,\n    list\n  };\n}","map":{"version":3,"sources":["/Users/agrimanand/Documents/demo/Assignmnet/my-app/src/hooks/useAddTodo.ts"],"names":["useEffect","useState","LOCAL_STORAGE_CONST","saveToLocalStorage","getFromLocalStorage","ListingTodoModel","useAddTodo","list","setList","Array","key","TODO_LIST","listJson","parsed","JSON","parse","jsonListFromStorage","setText","text","model","modelList","stringify","push","stringifiedList","setStrikeUnStrike","filteredElement","filter","e","id","element","isStriked","convertToJson"],"mappings":"AAAA,SAASA,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AACA,OAAOC,mBAAP,MAAgC,oCAAhC;AACA,SAASC,kBAAT,EAA6BC,mBAA7B,QAAwD,iCAAxD;AACA,OAAOC,gBAAP,MAA6B,qBAA7B;AAEA,eAAe,SAASC,UAAT,GAAsB;AAEjC,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBP,QAAQ,CAAqB,IAAIQ,KAAJ,EAArB,CAAhC;AACAT,EAAAA,SAAS,CAAC,MAAM;AACZ,UAAMU,GAAG,GAAGR,mBAAmB,CAACS,SAAhC;AACA,UAAMC,QAAQ,GAAGR,mBAAmB,CAACM,GAAD,CAApC;;AACA,QAAIE,QAAJ,EAAc;AACV,UAAIC,MAAM,GAAGC,IAAI,CAACC,KAAL,CAAWH,QAAX,CAAb;AACA,UAAII,mBAA4C,GAAGH,MAAnD;AACAL,MAAAA,OAAO,CAACQ,mBAAD,CAAP;AACH;AACJ,GARQ,EAQN,EARM,CAAT;;AAUA,QAAMC,OAAO,GAAIC,IAAD,IAAkB;AAC9B;AACA,UAAMR,GAAG,GAAGR,mBAAmB,CAACS,SAAhC;AACA,UAAMC,QAAQ,GAAGR,mBAAmB,CAACM,GAAD,CAApC;;AACA,QAAI,CAACE,QAAL,EAAe;AACX,UAAIO,KAAK,GAAG,IAAId,gBAAJ,CAAqBa,IAArB,CAAZ;AACA,UAAIE,SAAS,GAAG,CAACD,KAAD,CAAhB;AACA,UAAIZ,IAAI,GAAGO,IAAI,CAACO,SAAL,CAAeD,SAAf,CAAX;AACAjB,MAAAA,kBAAkB,CAACI,IAAD,EAAOG,GAAP,CAAlB;AACAF,MAAAA,OAAO,CAACY,SAAD,CAAP;AACH,KAND,MAMO;AACH,UAAIJ,mBAA4C,GAAGF,IAAI,CAACC,KAAL,CAAWH,QAAX,CAAnD;AACA,UAAIO,KAAK,GAAG,IAAId,gBAAJ,CAAqBa,IAArB,CAAZ;AACAF,MAAAA,mBAAmB,CAACM,IAApB,CAAyBH,KAAzB;AACA,UAAII,eAAe,GAAGT,IAAI,CAACO,SAAL,CAAeL,mBAAf,CAAtB;AACAb,MAAAA,kBAAkB,CAACoB,eAAD,EAAkBb,GAAlB,CAAlB;AACAF,MAAAA,OAAO,CAACQ,mBAAD,CAAP;AACH;AACJ,GAlBD;;AAoBA,QAAMQ,iBAAiB,GAAIL,KAAD,IAA6B;AACnD,UAAMT,GAAG,GAAGR,mBAAmB,CAACS,SAAhC;AACA,UAAMC,QAAQ,GAAGR,mBAAmB,CAACM,GAAD,CAApC;;AACA,QAAIE,QAAJ,EAAc;AACV,UAAII,mBAA4C,GAAGF,IAAI,CAACC,KAAL,CAAWH,QAAX,CAAnD;AACA,UAAIa,eAAe,GAAGT,mBAAmB,CAACU,MAApB,CAA4BC,CAAD,IAAO;AACpD,eAAOA,CAAC,CAACC,EAAF,KAAST,KAAK,CAACS,EAAtB;AACH,OAFqB,CAAtB;AAGA,UAAIC,OAAO,GAAGJ,eAAe,CAAC,CAAD,CAA7B;AACAI,MAAAA,OAAO,CAACC,SAAR,GAAoB,CAACD,OAAO,CAACC,SAA7B;AACA,YAAMC,aAAa,GAAGjB,IAAI,CAACO,SAAL,CAAeL,mBAAf,CAAtB;AACAb,MAAAA,kBAAkB,CAAC4B,aAAD,EAAgBrB,GAAhB,CAAlB;AACAF,MAAAA,OAAO,CAACQ,mBAAD,CAAP;AACH;AACJ,GAdD;;AAiBA,SAAO;AAAEQ,IAAAA,iBAAF;AAAqBP,IAAAA,OAArB;AAA8BV,IAAAA;AAA9B,GAAP;AACH","sourcesContent":["import { useEffect, useState } from 'react'\nimport LOCAL_STORAGE_CONST from '../constants/localStorageConstants'\nimport { saveToLocalStorage, getFromLocalStorage } from '../utilities/saveToLocalStorage'\nimport ListingTodoModel from '../models/todoModel'\n\nexport default function useAddTodo() {\n\n    const [list, setList] = useState<ListingTodoModel[]>(new Array())\n    useEffect(() => {\n        const key = LOCAL_STORAGE_CONST.TODO_LIST\n        const listJson = getFromLocalStorage(key)\n        if (listJson) {\n            let parsed = JSON.parse(listJson)\n            let jsonListFromStorage: Array<ListingTodoModel> = parsed\n            setList(jsonListFromStorage)\n        }\n    }, [])\n\n    const setText = (text: string) => {\n        debugger;\n        const key = LOCAL_STORAGE_CONST.TODO_LIST\n        const listJson = getFromLocalStorage(key)\n        if (!listJson) {\n            let model = new ListingTodoModel(text)\n            let modelList = [model]\n            let list = JSON.stringify(modelList)\n            saveToLocalStorage(list, key)\n            setList(modelList)\n        } else {\n            let jsonListFromStorage: Array<ListingTodoModel> = JSON.parse(listJson)\n            let model = new ListingTodoModel(text)\n            jsonListFromStorage.push(model)\n            let stringifiedList = JSON.stringify(jsonListFromStorage)\n            saveToLocalStorage(stringifiedList, key)\n            setList(jsonListFromStorage)\n        }\n    }\n\n    const setStrikeUnStrike = (model: ListingTodoModel) => {\n        const key = LOCAL_STORAGE_CONST.TODO_LIST\n        const listJson = getFromLocalStorage(key)\n        if (listJson) {\n            let jsonListFromStorage: Array<ListingTodoModel> = JSON.parse(listJson)\n            let filteredElement = jsonListFromStorage.filter((e) => {\n                return e.id === model.id\n            })\n            let element = filteredElement[0]\n            element.isStriked = !element.isStriked\n            const convertToJson = JSON.stringify(jsonListFromStorage)\n            saveToLocalStorage(convertToJson, key)\n            setList(jsonListFromStorage)\n        }\n    }\n\n\n    return { setStrikeUnStrike, setText, list }\n}"]},"metadata":{},"sourceType":"module"}